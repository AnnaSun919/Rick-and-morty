{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { API_URL } from \"../../config\";\n\nconst useFetch = (serachItem, searchOther, date, APIpage) => {\n  _s();\n\n  let [basic, setBasic] = useState({\n    totalPage: \"\",\n    totalCharacter: \"\",\n    character: \"\"\n  }); //setting page , for url\n\n  const [pageNoArr, setPageNoArr] = useState([]);\n  const [findNothing, setfindNothing] = useState(null);\n  useEffect(() => {\n    setfindNothing(null);\n\n    async function getcharacter() {\n      let dataArray = [];\n      let response = await axios.get(`${API_URL}/character/?page=${APIpage}`);\n\n      if (serachItem) {\n        if (searchOther) {\n          let searchValue = serachItem[\"species\"];\n          let searchValue1 = serachItem[\"status\"];\n          let searchValue2 = serachItem[\"name\"];\n\n          try {\n            response = await axios.get(`${API_URL}/character/?page=${APIpage}&status=${searchValue1}&species=${searchValue}&name=${searchValue2}`);\n          } catch (err) {\n            pageNo(0);\n            setfindNothing(\"No Character found\");\n          }\n\n          if (date) {\n            let test = [];\n            let page = 1;\n            let totalPage = response.data.info.pages;\n\n            while (page <= totalPage) {\n              response = await axios.get(`${API_URL}/character/?page=${page}&status=${searchValue1}&species=${searchValue}&name=${searchValue2}`);\n              page++;\n              test.push(response.data.results.filter(elem => {\n                return serachItem[\"startDate\"] <= elem.created && elem.created <= serachItem[\"endDate\"];\n              }));\n            }\n\n            dataArray = test.flat();\n          }\n        } else if (date) {\n          let response = await axios.get(`${API_URL}/character/?page=${APIpage}`);\n          let totalPage = response.data.info.pages;\n          let i = 1;\n          let test = [];\n\n          while (totalPage >= i) {\n            let responseData = await axios.get(`${API_URL}/character/?page=${i}`);\n            i++;\n            test.push(responseData.data.results.filter(elem => {\n              return serachItem[\"startDate\"] <= elem.created && elem.created <= serachItem[\"endDate\"];\n            }));\n          }\n\n          dataArray = test.flat();\n        }\n      }\n\n      pageNo(response.data.info.count);\n      setBasic({\n        totalCharacter: response.data.info.count,\n        character: response.data.results,\n        totalPage: response.data.info.pages\n      });\n\n      if (date) {\n        if (dataArray.length === 0) {\n          setfindNothing(\"Find no informaion\");\n        }\n\n        setBasic({\n          totalCharacter: dataArray.length,\n          character: dataArray\n        });\n        pageNo(dataArray.length);\n      }\n    }\n\n    const pageNo = totalCharacter => {\n      let totalPage = 0;\n      totalCharacter % 10 === 0 ? totalPage = totalCharacter / 10 : totalPage = totalCharacter / 10 + 1;\n      const pageArr = [];\n\n      for (let i = 1; i <= totalPage; i++) {\n        pageArr.push(i);\n      }\n\n      setPageNoArr(pageArr);\n    };\n\n    getcharacter();\n  }, [serachItem, APIpage, date, searchOther]);\n  return {\n    basic,\n    pageNoArr,\n    findNothing\n  };\n};\n\n_s(useFetch, \"VR5pFfIiZAPt0oNshGKtbEfmaEo=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/annasun/Desktop/IH-MAY-2021/Assignment/rick_and_morty/src/Component/Character/useFetch.js"],"names":["useState","useEffect","axios","API_URL","useFetch","serachItem","searchOther","date","APIpage","basic","setBasic","totalPage","totalCharacter","character","pageNoArr","setPageNoArr","findNothing","setfindNothing","getcharacter","dataArray","response","get","searchValue","searchValue1","searchValue2","err","pageNo","test","page","data","info","pages","push","results","filter","elem","created","flat","i","responseData","count","length","pageArr"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { API_URL } from \"../../config\";\n\nconst useFetch = (serachItem, searchOther, date, APIpage) => {\n  let [basic, setBasic] = useState({\n    totalPage: \"\",\n    totalCharacter: \"\",\n    character: \"\",\n  });\n  //setting page , for url\n  const [pageNoArr, setPageNoArr] = useState([]);\n  const [findNothing, setfindNothing] = useState(null);\n\n  useEffect(() => {\n    setfindNothing(null);\n    async function getcharacter() {\n      let dataArray = [];\n\n      let response = await axios.get(`${API_URL}/character/?page=${APIpage}`);\n\n      if (serachItem) {\n        if (searchOther) {\n          let searchValue = serachItem[\"species\"];\n          let searchValue1 = serachItem[\"status\"];\n          let searchValue2 = serachItem[\"name\"];\n          try {\n            response = await axios.get(\n              `${API_URL}/character/?page=${APIpage}&status=${searchValue1}&species=${searchValue}&name=${searchValue2}`\n            );\n          } catch (err) {\n            pageNo(0);\n            setfindNothing(\"No Character found\");\n          }\n\n          if (date) {\n            let test = [];\n            let page = 1;\n            let totalPage = response.data.info.pages;\n            while (page <= totalPage) {\n              response = await axios.get(\n                `${API_URL}/character/?page=${page}&status=${searchValue1}&species=${searchValue}&name=${searchValue2}`\n              );\n              page++;\n\n              test.push(\n                response.data.results.filter((elem) => {\n                  return (\n                    serachItem[\"startDate\"] <= elem.created &&\n                    elem.created <= serachItem[\"endDate\"]\n                  );\n                })\n              );\n            }\n\n            dataArray = test.flat();\n          }\n        } else if (date) {\n          let response = await axios.get(\n            `${API_URL}/character/?page=${APIpage}`\n          );\n\n          let totalPage = response.data.info.pages;\n          let i = 1;\n          let test = [];\n\n          while (totalPage >= i) {\n            let responseData = await axios.get(\n              `${API_URL}/character/?page=${i}`\n            );\n            i++;\n\n            test.push(\n              responseData.data.results.filter((elem) => {\n                return (\n                  serachItem[\"startDate\"] <= elem.created &&\n                  elem.created <= serachItem[\"endDate\"]\n                );\n              })\n            );\n          }\n          dataArray = test.flat();\n        }\n      }\n\n      pageNo(response.data.info.count);\n      setBasic({\n        totalCharacter: response.data.info.count,\n        character: response.data.results,\n        totalPage: response.data.info.pages,\n      });\n\n      if (date) {\n        if (dataArray.length === 0) {\n          setfindNothing(\"Find no informaion\");\n        }\n\n        setBasic({\n          totalCharacter: dataArray.length,\n          character: dataArray,\n        });\n\n        pageNo(dataArray.length);\n      }\n    }\n\n    const pageNo = (totalCharacter) => {\n      let totalPage = 0;\n      totalCharacter % 10 === 0\n        ? (totalPage = totalCharacter / 10)\n        : (totalPage = totalCharacter / 10 + 1);\n\n      const pageArr = [];\n      for (let i = 1; i <= totalPage; i++) {\n        pageArr.push(i);\n      }\n\n      setPageNoArr(pageArr);\n    };\n\n    getcharacter();\n  }, [serachItem, APIpage, date, searchOther]);\n\n  return { basic, pageNoArr, findNothing };\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}